<?php
/**
 * CodeIgniter
 *
 * An open source application development framework for PHP
 *
 * This content is released under the MIT License (MIT)
 *
 * Copyright (c) 2019 - 2022, CodeIgniter Foundation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * @package	CodeIgniter
 * @author	EllisLab Dev Team
 * @copyright	Copyright (c) 2008 - 2014, EllisLab, Inc. (https://ellislab.com/)
 * @copyright	Copyright (c) 2014 - 2019, British Columbia Institute of Technology (https://bcit.ca/)
 * @copyright	Copyright (c) 2019 - 2022, CodeIgniter Foundation (https://codeigniter.com/)
 * @license	https://opensource.org/licenses/MIT	MIT License
 * @link	https://codeigniter.com
 * @since	Version 1.0.0
 * @filesource
 */
defined('BASEPATH') or exit('No direct script access allowed');

/**
 * Config Class
 *
 * This class contains functions that enable config files to be managed
 *
 * @package CodeIgniter
 * @subpackage Libraries
 * @category Libraries
 * @author EllisLab Dev Team
 * @link https://codeigniter.com/userguide3/libraries/config.html
 */
class CI_Config
{

    /**
     * List of all loaded config values
     *
     * @var array
     */
    public $config = array(
        /*
        |--------------------------------------------------------------------------
        | Index File
        |--------------------------------------------------------------------------
        | Typically this will be your index.php file, unless you've renamed it to
        | something else. If you are using mod_rewrite to remove the page set this
        | variable so that it is blank. This is set below in the constructor since
        | its value is set via an expression.
        */
        'index_page' => '',

        /*
        |--------------------------------------------------------------------------
        | URI PROTOCOL
        |--------------------------------------------------------------------------
        | This item determines which server global should be used to retrieve the
        | URI string.  The default setting of "AUTO" works for most servers.
        | If your links do not seem to work, try one of the other delicious flavors:
        |
        | 'AUTO'            Default - auto detects
        | 'PATH_INFO'        Uses the PATH_INFO
        | 'QUERY_STRING'    Uses the QUERY_STRING
        | 'REQUEST_URI'        Uses the REQUEST_URI
        | 'ORIG_PATH_INFO'    Uses the ORIG_PATH_INFO
        */
        'uri_protocol' => 'QUERY_STRING',

        /*
        |--------------------------------------------------------------------------
        | URL suffix
        |--------------------------------------------------------------------------
        | This option allows you to add a suffix to all URLs generated by CodeIgniter.
        | For more information please see the user guide:
        | http://www.codeigniter.com/user_guide/general/urls.html
        */
        'url_suffix' => '',

        /*
        |--------------------------------------------------------------------------
        | Default Language
        |--------------------------------------------------------------------------
        | This determines which set of language files should be used. Make sure
        | there is an available translation if you intend to use something other
        | than english.
        */
        'language' => 'english',

        /*
        |--------------------------------------------------------------------------
        | Default Character Set
        |--------------------------------------------------------------------------
        | This determines which character set is used by default in various methods
        | that require a character set to be provided.
        */
        'charset' => 'UTF-8',

        /*
        |--------------------------------------------------------------------------
        | Enable/Disable System Hooks
        |--------------------------------------------------------------------------
        | If you would like to use the "hooks" feature you must enable it by
        | setting this variable to TRUE (boolean).  See the user guide for details.
        */
        'enable_hooks' => true,

        /*
        |--------------------------------------------------------------------------
        | Class Extension Prefix
        |--------------------------------------------------------------------------
        | This item allows you to set the filename/classname prefix when extending
        | native libraries.  For more information please see the user guide:
        | http://www.codeigniter.com/user_guide/general/core_classes.html
        | http://www.codeigniter.com/user_guide/general/creating_libraries.html
        */
        'subclass_prefix' => '',

        /*
        |--------------------------------------------------------------------------
        | Allowed URL Characters
        |--------------------------------------------------------------------------
        | This lets you specify which characters are permitted within your URLs.
        | When someone tries to submit a URL with disallowed characters they will
        | get a warning message.
        | As a security measure you are STRONGLY encouraged to restrict URLs to
        | as few characters as possible.  By default only these are allowed: a-z 0-9~%.:_-
        | Leave blank to allow all characters -- but only if you are insane. <-- GOOD THING WE ARE!
        | DO NOT CHANGE THIS UNLESS YOU FULLY UNDERSTAND THE REPERCUSSIONS!! <-- GOOD THING WE DO!
        */
        'permitted_uri_chars' => '',

        /*
        |--------------------------------------------------------------------------
        | Enable Query Strings
        |--------------------------------------------------------------------------
        | By default CodeIgniter uses search-engine friendly segment based URLs:
        | www.your-site.com/who/what/where/
        | You can optionally enable standard query string based URLs:
        | www.your-site.com?who=me&what=something&where=here
        | Options are: TRUE or FALSE (boolean)
        | The two other items let you set the query string "words" that will
        | invoke your controllers and its functions:
        | www.your-site.com/index.php?c=controller&m=function
        | Please note that some of the helpers won't work as expected when
        | this feature is enabled, since CodeIgniter is designed primarily to
        | use segment based URLs.
        */
        'enable_query_strings' => false,
        'controller_trigger' => 'c',
        'function_trigger' => 'm',

        /*
        |--------------------------------------------------------------------------
        | Error Logging Threshold
        |--------------------------------------------------------------------------
        | If you have enabled error logging, you can set an error threshold to
        | determine what gets logged. Threshold options are:
        | You can enable error logging by setting a threshold over zero. The
        | threshold determines what gets logged. Threshold options are:
        |
        |    0 = Disables logging, Error logging TURNED OFF
        |    1 = Error Messages (including PHP errors)
        |    2 = Debug Messages
        |    3 = Informational Messages
        |    4 = All Messages
        |
        | For a live site you'll usually only enable Errors (1) to be logged otherwise
        | your log files will fill up very fast.
        */
        'log_threshold' => 0,

        /*
        |--------------------------------------------------------------------------
        | Error Logging Directory Path
        |--------------------------------------------------------------------------
        | Leave this BLANK unless you would like to set something other than the default
        | system/logs/ folder.  Use a full server path with trailing slash.
        */
        'log_path' => '',

        /*
        |--------------------------------------------------------------------------
        | Date Format for Logs
        |--------------------------------------------------------------------------
        | Each item that is logged has an associated date. You can use PHP date
        | codes to set your own date formatting
        */
        'log_date_format' => 'Y-m-d H:i:s',

        /*
        |--------------------------------------------------------------------------
        | Cache Directory Path
        |--------------------------------------------------------------------------
        | Leave this BLANK unless you would like to set something other than the default
        | system/cache/ folder.  Use a full server path with trailing slash.
        */
        'cache_path' => '',
	    
        /*
        |--------------------------------------------------------------------------
        | Cache Include Query String
        |--------------------------------------------------------------------------
        |
        | Whether to take the URL query string into consideration when generating
        | output cache files. Valid options are:
        |
        |	FALSE      = Disabled
        |	TRUE       = Enabled, take all query parameters into account.
        |	             Please be aware that this may result in numerous cache
        |	             files generated for the same page over and over again.
        |	array('q') = Enabled, but only take into account the specified list
        |	             of query parameters.
        |
        */
        'cache_query_string' => FALSE,

        /*
        |--------------------------------------------------------------------------
        | Encryption Key
        |--------------------------------------------------------------------------
        | If you use the Encryption class or the Sessions class with encryption
        | enabled you MUST set an encryption key.  See the user guide for info.
        */
        'encryption_key' => '',

         /*
        |--------------------------------------------------------------------------
        | Session Variables
        |--------------------------------------------------------------------------
        | 'session_cookie_name' = the name you want for the cookie
        | 'encrypt_sess_cookie' = TRUE/FALSE (boolean).  Whether to encrypt the cookie
        | 'session_expiration'  = the number of SECONDS you want the session to last.
        |  by default sessions last 7200 seconds (two hours).  Set to zero for no expiration.
        */
        'sess_cookie_name' => 'ci_session',
        'sess_expiration' => 86400,
        'sess_encrypt_cookie' => true,
        'sess_use_database' => false,
        'sess_table_name' => '',
        'sess_match_ip' => false,
        'sess_match_useragent' => true,

        /*
        |--------------------------------------------------------------------------
        | Cookie Related Variables
        |--------------------------------------------------------------------------
        | 'cookie_prefix' = Set a prefix if you need to avoid collisions
        | 'cookie_domain' = Set to .your-domain.com for site-wide cookies
        | 'cookie_path'   =  Typically will be a forward slash
        */
        'cookie_prefix' => '',
        'cookie_domain' => '',
        'cookie_path' => '/',

        /*
        |--------------------------------------------------------------------------
        | Global XSS Filtering
        |--------------------------------------------------------------------------
        | Determines whether the XSS filter is always active when GET, POST or
        | COOKIE data is encountered
        */
        'global_xss_filtering' => false,

        /*
        |--------------------------------------------------------------------------
        | Output Compression
        |--------------------------------------------------------------------------
        | Enables Gzip output compression for faster page loads.  When enabled,
        | the output class will test whether your server supports Gzip.
        | Even if it does, however, not all browsers support compression
        | so enable only if you are reasonably sure your visitors can handle it.
        | VERY IMPORTANT:  If you are getting a blank page when compression is enabled it
        | means you are prematurely outputting something to your browser. It could
        | even be a line of whitespace at the end of one of your scripts.  For
        | compression to work, nothing can be sent before the output buffer is called
        | by the output class.  Do not "echo" any values with compression enabled.
        */
        'compress_output' => false,

        /*
        |--------------------------------------------------------------------------
        | Master Time Reference
        |--------------------------------------------------------------------------
        | Options are "local" or "gmt".  This pref tells the system whether to use
        | your server's local time as the master "now" reference, or convert it to
        | GMT.  See the "date helper" page of the user guide for information
        | regarding date handling.
        */
        'time_reference' => 'local',

        /*
        |--------------------------------------------------------------------------
        | Rewrite PHP Short Tags
        |--------------------------------------------------------------------------
        | If your PHP installation does not have short tag support enabled CI
        | can rewrite the tags on-the-fly, enabling you to utilize that syntax
        | in your view files.  Options are TRUE or FALSE (boolean)
        */
        'rewrite_short_tags' => false,

    	/*
    	|--------------------------------------------------------------------------
    	| Reverse Proxy IPs
    	|--------------------------------------------------------------------------
    	|
    	| If your server is behind a reverse proxy, you must whitelist the proxy IP
    	| addresses from which CodeIgniter should trust the HTTP_X_FORWARDED_FOR
    	| header in order to properly identify the visitor's IP address.
    	| Comma-delimited, e.g. '10.0.1.200,10.0.1.201'
    	|
    	*/
	    'proxy_ips' => '',

        /**
         * ***RNT CONFIG SECTION****
         */

        /*
        |--------------------------------------------------------------------------
        | suffix
        |--------------------------------------------------------------------------
        | The suffix setting holds a counter for an entire page. The counter
        | is used as a suffix to all ID's for that widget html. This allows multiple
        | instances of the same widget to be placed on a page. The counter is also used
        | for tab indexes. This value is incremented every time a widget is placed on
        | the page.
        */
        'w_id' => 0,

        /*
        |--------------------------------------------------------------------------
        | Parameter Segment Location
        |--------------------------------------------------------------------------
        | This number denotes which segment is the start of parameters in the page. This
        | value is set up in the page controller and will be used by widgets to know where
        | the parameters of a page begin. Default is 3.
        */
        'parm_segment' => 3,

        /*
        |--------------------------------------------------------------------------
        | Widget Instance IDs
        |--------------------------------------------------------------------------
        | Array to keep track of all defined values for the instanceID widget attributes. Duplicate
        | values are not allowed so we store the values during runtime in order to throw an error
        | if two widgets contain the same value.
        */
        'widgetInstanceIDs' => array()
    );

    /**
     * List of all loaded config files
     *
     * @var array
     */
    public $is_loaded = array();

    /**
     * List of paths to search when trying to load a config file.
     *
     * @used-by	CI_Loader
     * @var array
     */
    public $_config_paths = array(
        CPCORE
    );

    // --------------------------------------------------------------------

    /**
     * Class constructor
     *
     * Sets the $config data from the primary config.php file as a class variable.
     *
     * @return void
     */
    public function __construct()
    {
        /*
         * Ernie: Since we've already started editing CI source code, theres no need to have the
         * config details in another file so I've set them above except for index_page, which requires
         * the use of an expression to set.
         * $this->config =& get_config();
         */
        $this->config['index_page'] = SELF . '?';
        log_message('debug', "Config Class Initialized");
    }

    // --------------------------------------------------------------------

    /**
     * Load Config File
     *
     * @param string $file
     *            Configuration file name
     * @param bool $use_sections
     *            Whether configuration values should be loaded into their own section
     * @param bool $fail_gracefully
     *            Whether to just return FALSE or display an error message
     * @return bool TRUE if the file was loaded correctly or FALSE on failure
     */
    public function load($file = '', $use_sections = FALSE, $fail_gracefully = FALSE)
    {
        $file = ($file == '') ? 'config' : str_replace(EXT, '', $file);
        $loaded = FALSE;

        if (in_array($file, $this->is_loaded, TRUE)) {
            $loaded = TRUE;
            return TRUE;
        }

        if (! is_readable(CPCORE . 'config/' . $file . EXT)) {
            if ($fail_gracefully === TRUE) {
                return FALSE;
            }
            show_error('The configuration file ' . $file . EXT . ' does not exist.');
        }

        include (CPCORE . 'config/' . $file . EXT);

        if (! isset($config) or ! is_array($config)) {
            if ($fail_gracefully === TRUE) {
                return FALSE;
            }
            show_error('Your ' . $file . EXT . ' file does not appear to contain a valid configuration array.');
        }

        if ($use_sections === TRUE) {
            if (isset($this->config[$file])) {
                $this->config[$file] = array_merge($this->config[$file], $config);
            } else {
                $this->config[$file] = $config;
            }
        } else {
            $this->config = array_merge($this->config, $config);
        }

        $this->is_loaded[] = $file;
        $config = NULL;
        $loaded = TRUE;
        log_message('debug', 'Config file loaded: config/' . $file . EXT);
        return TRUE;
    }

    // --------------------------------------------------------------------

    /**
     * Fetch a config file item
     *
     * @param string $item
     *            Config item name
     * @param string $index
     *            Index name
     * @return string|null The configuration item or NULL if the item doesn't exist
     */
    public function item($item, $index = '')
    {
        if ($index == '') {
            return isset($this->config[$item]) ? $this->config[$item] : NULL;
        }

        return isset($this->config[$index], $this->config[$index][$item]) ? $this->config[$index][$item] : NULL;
    }

    // --------------------------------------------------------------------

    /**
     * Fetch a config file item with slash appended (if not empty)
     *
     * @param string $item
     *            Config item name
     * @return string|null The configuration item or NULL if the item doesn't exist
     */
    public function slash_item($item)
    {
        if (! isset($this->config[$item])) {
            return NULL;
        } elseif (trim($this->config[$item]) === '') {
            return '';
        }

        return rtrim($this->config[$item], '/') . '/';
    }

    // --------------------------------------------------------------------

    /**
     * Site URL
     *
     * Returns base_url . index_page [. uri_string]
     *
     * @uses CI_Config::_uri_string()
     *      
     * @param string|string[] $uri
     *            URI string or an array of segments
     * @param string $protocol
     * @return string
     */
    public function site_url($uri = '', $protocol = NULL)
    {
        $base_url = $this->slash_item('base_url');

        if (isset($protocol)) {
            // For protocol-relative links
            if ($protocol === '') {
                $base_url = substr($base_url, strpos($base_url, '//'));
            } else {
                $base_url = $protocol . substr($base_url, strpos($base_url, '://'));
            }
        }

        if (empty($uri)) {
            return $base_url . $this->item('index_page');
        }

        $uri = $this->_uri_string($uri);

        if ($this->item('enable_query_strings') === FALSE) {
            $suffix = isset($this->config['url_suffix']) ? $this->config['url_suffix'] : '';

            if ($suffix !== '') {
                if (($offset = strpos($uri, '?')) !== FALSE) {
                    $uri = substr($uri, 0, $offset) . $suffix . substr($uri, $offset);
                } else {
                    $uri .= $suffix;
                }
            }

            return $base_url . $this->slash_item('index_page') . $uri;
        } elseif (strpos($uri, '?') === FALSE) {
            $uri = '?' . $uri;
        }

        return $base_url . $this->item('index_page') . $uri;
    }

    // -------------------------------------------------------------

    /**
     * Base URL
     *
     * Returns base_url [. uri_string]
     *
     * @uses CI_Config::_uri_string()
     *      
     * @param string|string[] $uri
     *            URI string or an array of segments
     * @param string $protocol
     * @return string
     */
    public function base_url($uri = '', $protocol = NULL)
    {
        $base_url = $this->slash_item('base_url');

        if (isset($protocol)) {
            // For protocol-relative links
            if ($protocol === '') {
                $base_url = substr($base_url, strpos($base_url, '//'));
            } else {
                $base_url = $protocol . substr($base_url, strpos($base_url, '://'));
            }
        }

        return $base_url . $this->_uri_string($uri);
    }

    // -------------------------------------------------------------

    /**
     * Build URI string
     *
     * @used-by	CI_Config::site_url()
     * @used-by	CI_Config::base_url()
     *
     * @param string|string[] $uri
     *            URI string or an array of segments
     * @return string
     */
    protected function _uri_string($uri)
    {
        if ($this->item('enable_query_strings') === FALSE) {
            is_array($uri) && $uri = implode('/', $uri);
            return ltrim($uri, '/');
        } elseif (is_array($uri)) {
            return http_build_query($uri);
        }

        return $uri;
    }

    // --------------------------------------------------------------------

    /**
     * System URL
     *
     * @deprecated 3.0.0 Encourages insecure practices
     * @return string
     */
    public function system_url()
    {
        $x = explode('/', preg_replace('|/*(.+?)/*$|', '\\1', BASEPATH));
        return $this->slash_item('base_url') . end($x) . '/';
    }

    // --------------------------------------------------------------------

    /**
     * Set a config file item
     *
     * @param string $item
     *            Config item key
     * @param string $value
     *            Config item value
     * @return void
     */
    public function set_item($item, $value)
    {
        $this->config[$item] = $value;
    }
}
